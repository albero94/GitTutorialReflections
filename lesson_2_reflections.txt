What happens when you initialize a repository? Why do you need to do it?

	The .git folder gets created.
	It will keep track of the history and will allow me to use the git commands

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	It's an intermidiate stage that allows us to only commits the files we desire at a time
	

How can you use the staging area to make sure you have one commit per logical
change?

	Using git diff and git diff --staged I can know which are the current changes
	between the different stages and only commit the ones I want 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When you want to make changes like new versions, something experimental...
	And at the same time you want to keep the master version untouched and working

How do the diagrams help you visualize the branch structure?

	Allows you to see the different paths/branches that has been created
	also the parent child relationship is pretty clear

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	We merge the changes done in both branches and stay with only the label of the current checked out branch.			
	This is useful when working in two different features, or while working in one feature someone has fixed a bug in the master branch...

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	You can't merge automatically when there are conflicts as it would be really hard to 
	guess which is the right version as we are talking about lines of code

	It is interesting to merge automatically when git is able to determine objectively the sections to be added/removed